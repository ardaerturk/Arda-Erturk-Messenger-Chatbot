module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/slvn/Desktop/botpress-rivescript";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _botpressVersionManager = __webpack_require__(2);
	
	var _botpressVersionManager2 = _interopRequireDefault(_botpressVersionManager);
	
	var _path = __webpack_require__(3);
	
	var _path2 = _interopRequireDefault(_path);
	
	var _fsExtra = __webpack_require__(4);
	
	var _fsExtra2 = _interopRequireDefault(_fsExtra);
	
	var _lodash = __webpack_require__(5);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _rivescript = __webpack_require__(6);
	
	var _rivescript2 = _interopRequireDefault(_rivescript);
	
	var _calls = __webpack_require__(7);
	
	var _calls2 = _interopRequireDefault(_calls);
	
	var _deliveries = __webpack_require__(9);
	
	var _deliveries2 = _interopRequireDefault(_deliveries);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var rs = null;
	var utf8 = false;
	
	var validateRiveName = function validateRiveName(name) {
	  return (/[A-Z0-9_-]+/i.test(name)
	  );
	};
	
	var handleMessage = function handleMessage(event, id, user, platform, sendTo, text, sendText) {
	  var options = {};
	  rs.setUservar(id, 'platform', platform);
	  rs.setUservars(id, user);
	  rs.replyAsync(id, text).then(function (reply) {
	    _deliveries2.default.forEach(function (delivery) {
	      if (delivery && delivery.test.test(reply)) {
	        var send = function send(reply, options) {
	          sendText(sendTo, reply, options);
	        };
	        try {
	          delivery.handler(delivery.test.exec(reply), rs, event.bp, event, send);
	        } catch (err) {
	          event.bp.logger.error(err);
	          throw err;
	        }
	        next();
	        return;
	      }
	    });
	    sendText(sendTo, reply, options);
	  });
	};
	
	var incomingMiddleware = function incomingMiddleware(event, next) {
	  var user = event.user,
	      channel = event.channel,
	      platform = event.platform,
	      bp = event.bp,
	      text = event.text,
	      type = event.type,
	      raw = event.raw,
	      author = event.author;
	
	  if (platform === 'facebook') {
	    if (type !== 'message') {
	      return next();
	    }
	    handleMessage(event, user.id, user, platform, user.id, text, bp.messenger.sendText);
	  } else if (platform === "irc") {
	    if (type !== "pm") {
	      return next();
	    }
	    var sendTo = type === "message" ? channel : user;
	    handleMessage(event, user, user, platform, sendTo, text, bp.irc.sendMessage);
	  } else if (platform === "discord") {
	    if (type !== "message") {
	      return next();
	    }
	    if (!bp.discord.isPrivate(raw) || bp.discord.isSelf(user.id)) {
	      return next();
	    }
	    handleMessage(event, user.id, author, platform, channel.id, text, bp.discord.sendText);
	  } else {
	    throw new Error('Unsupported platform: ', platform);
	  }
	  next();
	};
	
	module.exports = {
	  init: function init(bp) {
	
	    (0, _botpressVersionManager2.default)(bp, __dirname);
	
	    bp.middlewares.register({
	      name: 'rivescript.processIncomingMessages',
	      order: 10,
	      type: 'incoming',
	      module: 'botpress-rivescript',
	      handler: incomingMiddleware,
	      description: 'Processes incoming messages by the RiveScript engine and sends responses'
	    });
	
	    bp.rivescript = {
	      setUtf8: function setUtf8(value) {
	        utf8 = value;
	        if (rs) {
	          reloadRiveScript();
	        }
	      }
	    };
	  },
	  ready: function ready(bp) {
	
	    var riveDirectory = _path2.default.join(bp.dataLocation, 'rivescript');
	
	    if (!_fsExtra2.default.existsSync(riveDirectory)) {
	      _fsExtra2.default.mkdirSync(riveDirectory);
	      _fsExtra2.default.copySync(_path2.default.join(__dirname, '../templates'), riveDirectory);
	    }
	
	    var saveMemory = function saveMemory() {
	      if (rs && rs.write) {
	        var usersVars = {};
	        var users = _lodash2.default.keys(rs._users);
	        users.forEach(function (user) {
	          usersVars[user] = rs.getUservars(user);
	        });
	
	        bp.db.kvs.set('__rivescript', usersVars, 'brain');
	      }
	    };
	    var restoreMemory = function restoreMemory() {
	      bp.logger.debug('[rivescript] Restoring brain');
	
	      bp.db.kvs.get('__rivescript', 'brain').then(function (content) {
	        if (!content) return;
	        var users = _lodash2.default.keys(content);
	        users.forEach(function (user) {
	          return rs.setUservars(user, content[user]);
	        });
	      });
	    };
	
	    var reloadRiveScript = function reloadRiveScript() {
	      saveMemory();
	      var isUtf8 = /true|1/i.test(process.env.RIVESCRIPT_UTF8) || utf8;
	      if (isUtf8) {
	        bp.logger.debug('[botpress-rivescript]', 'UTF8 mode enabled');
	      }
	      rs = new _rivescript2.default({ utf8: isUtf8 });
	
	      rs.loadDirectory(riveDirectory, function (batchNumber) {
	        rs.sortReplies();
	        restoreMemory();
	      }, function (err) {
	        console.log('Error', err); // TODO clean that
	      });
	
	      (0, _calls2.default)(rs);
	    };
	
	    reloadRiveScript();
	
	    setInterval(saveMemory, 30000);
	    var router = bp.getRouter('botpress-rivescript');
	
	    router.get('/scripts', function (req, res, next) {
	      var data = {};
	      var files = _fsExtra2.default.readdirSync(riveDirectory);
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;
	
	      try {
	        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var file = _step.value;
	
	          var name = file.replace(/\.rive$/, '');
	          var content = _fsExtra2.default.readFileSync(_path2.default.join(riveDirectory, file)).toString();
	          data[name] = content;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	
	      res.send(data);
	    });
	
	    router.delete('/scripts/:name', function (req, res, next) {
	      var name = req.params.name;
	
	
	      if (!name || name.length <= 0 || !validateRiveName(name)) {
	        throw new Error('Invalid rivescript name: ' + name);
	      }
	
	      var filePath = _path2.default.join(riveDirectory, name + '.rive');
	
	      if (!_fsExtra2.default.existsSync(filePath)) {
	        throw new Error("This script doesn't exist");
	      }
	
	      _fsExtra2.default.unlinkSync(filePath);
	
	      reloadRiveScript();
	
	      res.sendStatus(200);
	    });
	
	    // create a new script
	    router.post('/scripts', function (req, res, next) {
	      var _req$body = req.body,
	          name = _req$body.name,
	          content = _req$body.content,
	          overwrite = _req$body.overwrite;
	
	
	      if (!name || name.length <= 0 || !validateRiveName(name)) {
	        throw new Error('Invalid rivescript name: ' + name);
	      }
	
	      var filePath = _path2.default.join(riveDirectory, name + '.rive');
	
	      if (!overwrite && _fsExtra2.default.existsSync(filePath)) {
	        throw new Error("Can't overwrite script: " + name);
	      }
	
	      _fsExtra2.default.writeFileSync(filePath, content);
	
	      reloadRiveScript();
	
	      res.sendStatus(200);
	    });
	
	    router.post('/reset', function (req, res, next) {
	      reloadRiveScript();
	      res.sendStatus(200);
	    });
	
	    router.post('/simulate', function (req, res, next) {
	      var text = req.body.text;
	
	      rs.replyAsync('local-user', text).then(function (reply) {
	        _deliveries2.default.forEach(function (delivery) {
	          if (delivery && delivery.test.test(reply)) {
	            res.send('[Would be delivered by "' + delivery.name + '"]: ' + reply);
	            return;
	          }
	        });
	        res.send(reply);
	      });
	    });
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("botpress-version-manager");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("fs-extra");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("rivescript");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _bluebird = __webpack_require__(8);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function wait(rs, _ref) {
	  var _ref2 = _slicedToArray(_ref, 1),
	      ms = _ref2[0];
	
	  return _bluebird2.default.delay('', ms);
	}
	
	module.exports = function (rs) {
	  rs.setSubroutine('wait', wait);
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("bluebird");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _lodash = __webpack_require__(5);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var jsDelivery = {
	  test: /^js: (.+)/i,
	  name: 'javascript',
	  handler: function handler(match, rs, bp, event, send) {
	    var body = match[1];
	    var fn = new Function('rs', 'bp', 'event', 'send', body);
	    fn(rs, bp, event, send);
	  }
	};
	
	module.exports = [jsDelivery];

/***/ }
/******/ ]);
//# sourceMappingURL=node.bundle.js.map